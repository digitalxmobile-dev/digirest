/**
 * This file manage all the external configurations
 * Author: Aureliano
 */
"use strict";

/** global requires and vars */
var PropertiesReader = require('properties-reader');
//var FileService = require('../fileservice/FileService');
var FileService = require('../objectFactory/ObjectFactory').fileService;
var AdvancedString = require('string');
var PROPERTIES_FOLDER = FileService.getPath('/config/properties/');
var PROPERTIES_SUFFIX = '.properties';
var MODULE_NAME = 'BasicConfigurationService';
var _properties;


/**
 * Init the configuration service
 * @param onInitComplete (boolean success, error)
 * @private
 */
function _init(expressApp,onInitComplete) {
    var success = false;
    var err = null;
    if(_properties) {
        // INIT OK
        success = true;
        onInitComplete(err,success);
    }else {
        // TODO async
        FileService.getFilenamesInFolder(PROPERTIES_FOLDER, function (fileInPropertiesFolder, error) {
            if (fileInPropertiesFolder) {
                // file list
                fileInPropertiesFolder.forEach(
                    function (filename) {
                        var fileNameStr = AdvancedString(filename);
                        if (fileNameStr && fileNameStr.endsWith(PROPERTIES_SUFFIX)) {
                            // if is a properties file, load it
                            if (_properties) {
                                _properties.append(PROPERTIES_FOLDER + filename);
                            } else {
                                _properties = PropertiesReader(PROPERTIES_FOLDER + filename);
                            }
                            console.log(MODULE_NAME + ': properties file loaded [' +PROPERTIES_FOLDER + filename + ']');
                        }
                    });
                success = true;
                global.__properties=_properties;
                // if express app is an object, bind the property */
                if (expressApp) {
                    //_properties.bindToExpress(expressApp, PROPERTIES_FOLDER, false);
                    console.log(MODULE_NAME + ": express bound ok");
                }
                // calback
                onInitComplete( err,success);
            } else if (error) {
                // error
                onInitComplete(error,success);
            } else {
                // empty file list
                onInitComplete( Error("no properties file in folder" + PROPERTIES_FOLDER),succes);
            }


        });

    }
}

/**
 * get a single property
 * @param key the key of the property
 * @param onGetComplete(value,error)
 * @private
 */
function _getProperty(key,onGetComplete){
    //console.log('get ' + key);
    if(key && onGetComplete) {
        _init(null,function (error,success) {
            if (success) {
                if (_properties) {
                    var value = _properties.get(key);
                    onGetComplete(null, value);
                } else {
                    console.log(MODULE_NAME + " getProperty: properties not init-ed");
                    onGetComplete(null, null);
                }
            } else {
                console.log(MODULE_NAME + " getProperty: properties not found " + key);
                onGetComplete(error, null);
            }
        });
    }
}

/**
 * get a multivalued property splitted in array
 * @param key the key of the property
 * @param onGetComplete(valueArray,error)
 * @private
 */
function _getPropertiesArray(key,onGetCompleteArray){
    //console.log('getArray ' + key);
    _getProperty(key, function onGet(error,value) {
        //console.log('=======================CALLBACK RECEIVE: ' + JSON.stringify(value));
        if (value) {
            //console.log('getArray : ' + value);
            var valueArray = value.split(',');
            onGetCompleteArray( null,valueArray);
        } else if (error) {
            //console.log('getArray : error');
            onGetCompleteArray(error,null);
        } else {
            var value = null;
            //console.log('getArray : ' + value);
            onGetCompleteArray(null,value);
        }
    });

}

/**
 * get a json object by a root key
 * @param root
 * @param onGetCompleteJson
 * @private
 */
function _getPropertiesJsonByRoot(root,onGetCompleteJson){
    if(root && onGetCompleteJson) {
        _init(null,function (error,success) {
            if (success) {
                if (_properties) {
                    var jsonObj = _properties.getByRoot(root);
                    onGetCompleteJson( null, jsonObj);
                } else {
                    console.log(MODULE_NAME + " getProperty: properties not init-ed");
                    onGetCompleteJson(null, null);
                }
            } else {
                onGetCompleteJson( error ,null);
            }
        });
    }
}

/**
 * exports
 */
exports.init=_init;
exports.getProperty=_getProperty;
exports.getPropertiesArray=_getPropertiesArray;
exports.getPropertiesJsonByRoot=_getPropertiesJsonByRoot
exports.properties=_properties;
